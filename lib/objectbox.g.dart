// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/domain/entities/group_entity.dart';
import 'features/domain/entities/group_message_entity.dart';
import 'features/domain/entities/group_message_type_entity.dart';
import 'features/domain/entities/group_user_entity.dart';
import 'features/domain/entities/message_entity.dart';
import 'features/domain/entities/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 962377739071892748),
      name: 'GroupEntity',
      lastPropertyId: const IdUid(14, 4193374784908062106),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5133526708415713423),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8472778788011772995),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4060330444797697090),
            name: 'groupCreatorUserPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8150251929155147706),
            name: 'groupName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5211806115353084569),
            name: 'groupAvatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1912620459302756109),
            name: 'createDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8300649684769031783),
            name: 'lastMessageSenderFullName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7663721106103389065),
            name: 'lastMessageBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 846486717679610519),
            name: 'lastMessageDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3664759433630450185),
            name: 'lastMessageCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7758523878521543864),
            name: 'lastMessageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7123463890007272892),
            name: 'lastMessageIsReadByGroupUser',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 1696372282178470607),
            name: 'isConfirm',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4193374784908062106),
            name: 'notReadMessageCount',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2245648178531074749),
      name: 'GroupMessageEntity',
      lastPropertyId: const IdUid(7, 5134214157978644879),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2103793251231539958),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5157735600153251941),
            name: 'messageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8972839449334169308),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8895395562174944661),
            name: 'senderPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6048517136755045242),
            name: 'messageCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6013171731543648637),
            name: 'messageBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5134214157978644879),
            name: 'messageDateTime',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 779745818344396311),
      name: 'GroupMessageTypeEntity',
      lastPropertyId: const IdUid(6, 4654089458322331595),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4916649034553785672),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6561407827563173446),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7378469625430863667),
            name: 'messageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5540305217900628454),
            name: 'receiverPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 222347786311958414),
            name: 'messageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4654089458322331595),
            name: 'messageIsReadByGroupUser',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 4982635435746120351),
      name: 'GroupUserEntity',
      lastPropertyId: const IdUid(4, 7245665891220590000),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1954038684585957601),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7340328254801314423),
            name: 'groupId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 996948107762254214),
            name: 'userPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7245665891220590000),
            name: 'isAdmin',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2571916921137526024),
      name: 'MessageEntity',
      lastPropertyId: const IdUid(9, 4122186488881015082),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1915017819137047008),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6411308970271632365),
            name: 'messageId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5233892670571830193),
            name: 'senderPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 483056101346409597),
            name: 'targetPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4214758249110335052),
            name: 'messageCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7630099666347813458),
            name: 'messageBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1975123797377264827),
            name: 'messageDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2618280616127960630),
            name: 'messageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4122186488881015082),
            name: 'messageIsReadByTargetUser',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 4777558602983349766),
      name: 'UserEntity',
      lastPropertyId: const IdUid(14, 8393056459902055607),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1389200632520195858),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5188640544563972181),
            name: 'userPhoneNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3801740623041085276),
            name: 'fullName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3851969674035853260),
            name: 'userAvatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4688886105994163802),
            name: 'lastSeenDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9120669609173358075),
            name: 'lastMessageBody',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7114741673590324069),
            name: 'lastMessageDateTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9164538062791863587),
            name: 'lastMessageCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7847118720529623442),
            name: 'lastMessageType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 573286213124545676),
            name: 'lastMessageIsReadByTargetUser',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4395332104772663858),
            name: 'isConfirm',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6723614472738014631),
            name: 'notReadMessageCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4160084302788370827),
            name: 'verifyCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8393056459902055607),
            name: 'verifyProfile',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 4777558602983349766),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    GroupEntity: EntityDefinition<GroupEntity>(
        model: _entities[0],
        toOneRelations: (GroupEntity object) => [],
        toManyRelations: (GroupEntity object) => {},
        getId: (GroupEntity object) => object.id,
        setId: (GroupEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field GroupEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (GroupEntity object, fb.Builder fbb) {
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final groupCreatorUserPhoneNumberOffset =
              object.groupCreatorUserPhoneNumber == null
                  ? null
                  : fbb.writeString(object.groupCreatorUserPhoneNumber!);
          final groupNameOffset = object.groupName == null
              ? null
              : fbb.writeString(object.groupName!);
          final groupAvatarOffset = object.groupAvatar == null
              ? null
              : fbb.writeString(object.groupAvatar!);
          final createDateTimeOffset = object.createDateTime == null
              ? null
              : fbb.writeString(object.createDateTime!);
          final lastMessageSenderFullNameOffset =
              object.lastMessageSenderFullName == null
                  ? null
                  : fbb.writeString(object.lastMessageSenderFullName!);
          final lastMessageBodyOffset = object.lastMessageBody == null
              ? null
              : fbb.writeString(object.lastMessageBody!);
          final lastMessageDateTimeOffset = object.lastMessageDateTime == null
              ? null
              : fbb.writeString(object.lastMessageDateTime!);
          final lastMessageCategoryOffset = object.lastMessageCategory == null
              ? null
              : fbb.writeString(object.lastMessageCategory!);
          final lastMessageTypeOffset = object.lastMessageType == null
              ? null
              : fbb.writeString(object.lastMessageType!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, groupIdOffset);
          fbb.addOffset(2, groupCreatorUserPhoneNumberOffset);
          fbb.addOffset(3, groupNameOffset);
          fbb.addOffset(4, groupAvatarOffset);
          fbb.addOffset(5, createDateTimeOffset);
          fbb.addOffset(6, lastMessageSenderFullNameOffset);
          fbb.addOffset(7, lastMessageBodyOffset);
          fbb.addOffset(8, lastMessageDateTimeOffset);
          fbb.addOffset(9, lastMessageCategoryOffset);
          fbb.addOffset(10, lastMessageTypeOffset);
          fbb.addBool(11, object.lastMessageIsReadByGroupUser);
          fbb.addBool(12, object.isConfirm);
          fbb.addInt64(13, object.notReadMessageCount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GroupEntity(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              groupCreatorUserPhoneNumber:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 8),
              groupName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              groupAvatar: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              createDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              lastMessageSenderFullName:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 16),
              lastMessageBody: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              lastMessageDateTime: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              lastMessageCategory: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              lastMessageType: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              lastMessageIsReadByGroupUser: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 26),
              isConfirm: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 28),
              notReadMessageCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30));

          return object;
        }),
    GroupMessageEntity: EntityDefinition<GroupMessageEntity>(
        model: _entities[1],
        toOneRelations: (GroupMessageEntity object) => [],
        toManyRelations: (GroupMessageEntity object) => {},
        getId: (GroupMessageEntity object) => object.id,
        setId: (GroupMessageEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field GroupMessageEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (GroupMessageEntity object, fb.Builder fbb) {
          final messageIdOffset = object.messageId == null
              ? null
              : fbb.writeString(object.messageId!);
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final senderPhoneNumberOffset = object.senderPhoneNumber == null
              ? null
              : fbb.writeString(object.senderPhoneNumber!);
          final messageCategoryOffset = object.messageCategory == null
              ? null
              : fbb.writeString(object.messageCategory!);
          final messageBodyOffset = object.messageBody == null
              ? null
              : fbb.writeString(object.messageBody!);
          final messageDateTimeOffset = object.messageDateTime == null
              ? null
              : fbb.writeString(object.messageDateTime!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, groupIdOffset);
          fbb.addOffset(3, senderPhoneNumberOffset);
          fbb.addOffset(4, messageCategoryOffset);
          fbb.addOffset(5, messageBodyOffset);
          fbb.addOffset(6, messageDateTimeOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GroupMessageEntity(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              messageId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              senderPhoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              messageCategory: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              messageBody: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              messageDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16));

          return object;
        }),
    GroupMessageTypeEntity: EntityDefinition<GroupMessageTypeEntity>(
        model: _entities[2],
        toOneRelations: (GroupMessageTypeEntity object) => [],
        toManyRelations: (GroupMessageTypeEntity object) => {},
        getId: (GroupMessageTypeEntity object) => object.id,
        setId: (GroupMessageTypeEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field GroupMessageTypeEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (GroupMessageTypeEntity object, fb.Builder fbb) {
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final messageIdOffset = object.messageId == null
              ? null
              : fbb.writeString(object.messageId!);
          final receiverPhoneNumberOffset = object.receiverPhoneNumber == null
              ? null
              : fbb.writeString(object.receiverPhoneNumber!);
          final messageTypeOffset = object.messageType == null
              ? null
              : fbb.writeString(object.messageType!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, groupIdOffset);
          fbb.addOffset(2, messageIdOffset);
          fbb.addOffset(3, receiverPhoneNumberOffset);
          fbb.addOffset(4, messageTypeOffset);
          fbb.addBool(5, object.messageIsReadByGroupUser);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GroupMessageTypeEntity(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              messageId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              receiverPhoneNumber:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGetNullable(buffer, rootOffset, 10),
              messageType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              messageIsReadByGroupUser: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    GroupUserEntity: EntityDefinition<GroupUserEntity>(
        model: _entities[3],
        toOneRelations: (GroupUserEntity object) => [],
        toManyRelations: (GroupUserEntity object) => {},
        getId: (GroupUserEntity object) => object.id,
        setId: (GroupUserEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field GroupUserEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (GroupUserEntity object, fb.Builder fbb) {
          final groupIdOffset =
              object.groupId == null ? null : fbb.writeString(object.groupId!);
          final userPhoneNumberOffset = object.userPhoneNumber == null
              ? null
              : fbb.writeString(object.userPhoneNumber!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, groupIdOffset);
          fbb.addOffset(2, userPhoneNumberOffset);
          fbb.addBool(3, object.isAdmin);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GroupUserEntity(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              groupId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              userPhoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isAdmin: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        }),
    MessageEntity: EntityDefinition<MessageEntity>(
        model: _entities[4],
        toOneRelations: (MessageEntity object) => [],
        toManyRelations: (MessageEntity object) => {},
        getId: (MessageEntity object) => object.id,
        setId: (MessageEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field MessageEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (MessageEntity object, fb.Builder fbb) {
          final messageIdOffset = object.messageId == null
              ? null
              : fbb.writeString(object.messageId!);
          final senderPhoneNumberOffset = object.senderPhoneNumber == null
              ? null
              : fbb.writeString(object.senderPhoneNumber!);
          final targetPhoneNumberOffset = object.targetPhoneNumber == null
              ? null
              : fbb.writeString(object.targetPhoneNumber!);
          final messageCategoryOffset = object.messageCategory == null
              ? null
              : fbb.writeString(object.messageCategory!);
          final messageBodyOffset = object.messageBody == null
              ? null
              : fbb.writeString(object.messageBody!);
          final messageDateTimeOffset = object.messageDateTime == null
              ? null
              : fbb.writeString(object.messageDateTime!);
          final messageTypeOffset = object.messageType == null
              ? null
              : fbb.writeString(object.messageType!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, senderPhoneNumberOffset);
          fbb.addOffset(3, targetPhoneNumberOffset);
          fbb.addOffset(4, messageCategoryOffset);
          fbb.addOffset(5, messageBodyOffset);
          fbb.addOffset(6, messageDateTimeOffset);
          fbb.addOffset(7, messageTypeOffset);
          fbb.addBool(8, object.messageIsReadByTargetUser);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MessageEntity(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              messageId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              senderPhoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              targetPhoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              messageCategory: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              messageBody: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              messageDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              messageType: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              messageIsReadByTargetUser: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20));

          return object;
        }),
    UserEntity: EntityDefinition<UserEntity>(
        model: _entities[5],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field UserEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final userPhoneNumberOffset = object.userPhoneNumber == null
              ? null
              : fbb.writeString(object.userPhoneNumber!);
          final fullNameOffset = object.fullName == null
              ? null
              : fbb.writeString(object.fullName!);
          final userAvatarOffset = object.userAvatar == null
              ? null
              : fbb.writeString(object.userAvatar!);
          final lastSeenDateTimeOffset = object.lastSeenDateTime == null
              ? null
              : fbb.writeString(object.lastSeenDateTime!);
          final lastMessageBodyOffset = object.lastMessageBody == null
              ? null
              : fbb.writeString(object.lastMessageBody!);
          final lastMessageDateTimeOffset = object.lastMessageDateTime == null
              ? null
              : fbb.writeString(object.lastMessageDateTime!);
          final lastMessageCategoryOffset = object.lastMessageCategory == null
              ? null
              : fbb.writeString(object.lastMessageCategory!);
          final lastMessageTypeOffset = object.lastMessageType == null
              ? null
              : fbb.writeString(object.lastMessageType!);
          final verifyCodeOffset = object.verifyCode == null
              ? null
              : fbb.writeString(object.verifyCode!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, userPhoneNumberOffset);
          fbb.addOffset(2, fullNameOffset);
          fbb.addOffset(3, userAvatarOffset);
          fbb.addOffset(4, lastSeenDateTimeOffset);
          fbb.addOffset(5, lastMessageBodyOffset);
          fbb.addOffset(6, lastMessageDateTimeOffset);
          fbb.addOffset(7, lastMessageCategoryOffset);
          fbb.addOffset(8, lastMessageTypeOffset);
          fbb.addBool(9, object.lastMessageIsReadByTargetUser);
          fbb.addBool(10, object.isConfirm);
          fbb.addInt64(11, object.notReadMessageCount);
          fbb.addOffset(12, verifyCodeOffset);
          fbb.addBool(13, object.verifyProfile);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserEntity(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              userPhoneNumber: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              fullName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              userAvatar: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              lastSeenDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              lastMessageBody: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              lastMessageDateTime: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              lastMessageCategory:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              lastMessageType: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              lastMessageIsReadByTargetUser: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22),
              isConfirm: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 24),
              notReadMessageCount: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26),
              verifyCode: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              verifyProfile: const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 30));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [GroupEntity] entity fields to define ObjectBox queries.
class GroupEntity_ {
  /// see [GroupEntity.id]
  static final id =
      QueryIntegerProperty<GroupEntity>(_entities[0].properties[0]);

  /// see [GroupEntity.groupId]
  static final groupId =
      QueryStringProperty<GroupEntity>(_entities[0].properties[1]);

  /// see [GroupEntity.groupCreatorUserPhoneNumber]
  static final groupCreatorUserPhoneNumber =
      QueryStringProperty<GroupEntity>(_entities[0].properties[2]);

  /// see [GroupEntity.groupName]
  static final groupName =
      QueryStringProperty<GroupEntity>(_entities[0].properties[3]);

  /// see [GroupEntity.groupAvatar]
  static final groupAvatar =
      QueryStringProperty<GroupEntity>(_entities[0].properties[4]);

  /// see [GroupEntity.createDateTime]
  static final createDateTime =
      QueryStringProperty<GroupEntity>(_entities[0].properties[5]);

  /// see [GroupEntity.lastMessageSenderFullName]
  static final lastMessageSenderFullName =
      QueryStringProperty<GroupEntity>(_entities[0].properties[6]);

  /// see [GroupEntity.lastMessageBody]
  static final lastMessageBody =
      QueryStringProperty<GroupEntity>(_entities[0].properties[7]);

  /// see [GroupEntity.lastMessageDateTime]
  static final lastMessageDateTime =
      QueryStringProperty<GroupEntity>(_entities[0].properties[8]);

  /// see [GroupEntity.lastMessageCategory]
  static final lastMessageCategory =
      QueryStringProperty<GroupEntity>(_entities[0].properties[9]);

  /// see [GroupEntity.lastMessageType]
  static final lastMessageType =
      QueryStringProperty<GroupEntity>(_entities[0].properties[10]);

  /// see [GroupEntity.lastMessageIsReadByGroupUser]
  static final lastMessageIsReadByGroupUser =
      QueryBooleanProperty<GroupEntity>(_entities[0].properties[11]);

  /// see [GroupEntity.isConfirm]
  static final isConfirm =
      QueryBooleanProperty<GroupEntity>(_entities[0].properties[12]);

  /// see [GroupEntity.notReadMessageCount]
  static final notReadMessageCount =
      QueryIntegerProperty<GroupEntity>(_entities[0].properties[13]);
}

/// [GroupMessageEntity] entity fields to define ObjectBox queries.
class GroupMessageEntity_ {
  /// see [GroupMessageEntity.id]
  static final id =
      QueryIntegerProperty<GroupMessageEntity>(_entities[1].properties[0]);

  /// see [GroupMessageEntity.messageId]
  static final messageId =
      QueryStringProperty<GroupMessageEntity>(_entities[1].properties[1]);

  /// see [GroupMessageEntity.groupId]
  static final groupId =
      QueryStringProperty<GroupMessageEntity>(_entities[1].properties[2]);

  /// see [GroupMessageEntity.senderPhoneNumber]
  static final senderPhoneNumber =
      QueryStringProperty<GroupMessageEntity>(_entities[1].properties[3]);

  /// see [GroupMessageEntity.messageCategory]
  static final messageCategory =
      QueryStringProperty<GroupMessageEntity>(_entities[1].properties[4]);

  /// see [GroupMessageEntity.messageBody]
  static final messageBody =
      QueryStringProperty<GroupMessageEntity>(_entities[1].properties[5]);

  /// see [GroupMessageEntity.messageDateTime]
  static final messageDateTime =
      QueryStringProperty<GroupMessageEntity>(_entities[1].properties[6]);
}

/// [GroupMessageTypeEntity] entity fields to define ObjectBox queries.
class GroupMessageTypeEntity_ {
  /// see [GroupMessageTypeEntity.id]
  static final id =
      QueryIntegerProperty<GroupMessageTypeEntity>(_entities[2].properties[0]);

  /// see [GroupMessageTypeEntity.groupId]
  static final groupId =
      QueryStringProperty<GroupMessageTypeEntity>(_entities[2].properties[1]);

  /// see [GroupMessageTypeEntity.messageId]
  static final messageId =
      QueryStringProperty<GroupMessageTypeEntity>(_entities[2].properties[2]);

  /// see [GroupMessageTypeEntity.receiverPhoneNumber]
  static final receiverPhoneNumber =
      QueryStringProperty<GroupMessageTypeEntity>(_entities[2].properties[3]);

  /// see [GroupMessageTypeEntity.messageType]
  static final messageType =
      QueryStringProperty<GroupMessageTypeEntity>(_entities[2].properties[4]);

  /// see [GroupMessageTypeEntity.messageIsReadByGroupUser]
  static final messageIsReadByGroupUser =
      QueryBooleanProperty<GroupMessageTypeEntity>(_entities[2].properties[5]);
}

/// [GroupUserEntity] entity fields to define ObjectBox queries.
class GroupUserEntity_ {
  /// see [GroupUserEntity.id]
  static final id =
      QueryIntegerProperty<GroupUserEntity>(_entities[3].properties[0]);

  /// see [GroupUserEntity.groupId]
  static final groupId =
      QueryStringProperty<GroupUserEntity>(_entities[3].properties[1]);

  /// see [GroupUserEntity.userPhoneNumber]
  static final userPhoneNumber =
      QueryStringProperty<GroupUserEntity>(_entities[3].properties[2]);

  /// see [GroupUserEntity.isAdmin]
  static final isAdmin =
      QueryBooleanProperty<GroupUserEntity>(_entities[3].properties[3]);
}

/// [MessageEntity] entity fields to define ObjectBox queries.
class MessageEntity_ {
  /// see [MessageEntity.id]
  static final id =
      QueryIntegerProperty<MessageEntity>(_entities[4].properties[0]);

  /// see [MessageEntity.messageId]
  static final messageId =
      QueryStringProperty<MessageEntity>(_entities[4].properties[1]);

  /// see [MessageEntity.senderPhoneNumber]
  static final senderPhoneNumber =
      QueryStringProperty<MessageEntity>(_entities[4].properties[2]);

  /// see [MessageEntity.targetPhoneNumber]
  static final targetPhoneNumber =
      QueryStringProperty<MessageEntity>(_entities[4].properties[3]);

  /// see [MessageEntity.messageCategory]
  static final messageCategory =
      QueryStringProperty<MessageEntity>(_entities[4].properties[4]);

  /// see [MessageEntity.messageBody]
  static final messageBody =
      QueryStringProperty<MessageEntity>(_entities[4].properties[5]);

  /// see [MessageEntity.messageDateTime]
  static final messageDateTime =
      QueryStringProperty<MessageEntity>(_entities[4].properties[6]);

  /// see [MessageEntity.messageType]
  static final messageType =
      QueryStringProperty<MessageEntity>(_entities[4].properties[7]);

  /// see [MessageEntity.messageIsReadByTargetUser]
  static final messageIsReadByTargetUser =
      QueryBooleanProperty<MessageEntity>(_entities[4].properties[8]);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// see [UserEntity.id]
  static final id =
      QueryIntegerProperty<UserEntity>(_entities[5].properties[0]);

  /// see [UserEntity.userPhoneNumber]
  static final userPhoneNumber =
      QueryStringProperty<UserEntity>(_entities[5].properties[1]);

  /// see [UserEntity.fullName]
  static final fullName =
      QueryStringProperty<UserEntity>(_entities[5].properties[2]);

  /// see [UserEntity.userAvatar]
  static final userAvatar =
      QueryStringProperty<UserEntity>(_entities[5].properties[3]);

  /// see [UserEntity.lastSeenDateTime]
  static final lastSeenDateTime =
      QueryStringProperty<UserEntity>(_entities[5].properties[4]);

  /// see [UserEntity.lastMessageBody]
  static final lastMessageBody =
      QueryStringProperty<UserEntity>(_entities[5].properties[5]);

  /// see [UserEntity.lastMessageDateTime]
  static final lastMessageDateTime =
      QueryStringProperty<UserEntity>(_entities[5].properties[6]);

  /// see [UserEntity.lastMessageCategory]
  static final lastMessageCategory =
      QueryStringProperty<UserEntity>(_entities[5].properties[7]);

  /// see [UserEntity.lastMessageType]
  static final lastMessageType =
      QueryStringProperty<UserEntity>(_entities[5].properties[8]);

  /// see [UserEntity.lastMessageIsReadByTargetUser]
  static final lastMessageIsReadByTargetUser =
      QueryBooleanProperty<UserEntity>(_entities[5].properties[9]);

  /// see [UserEntity.isConfirm]
  static final isConfirm =
      QueryBooleanProperty<UserEntity>(_entities[5].properties[10]);

  /// see [UserEntity.notReadMessageCount]
  static final notReadMessageCount =
      QueryIntegerProperty<UserEntity>(_entities[5].properties[11]);

  /// see [UserEntity.verifyCode]
  static final verifyCode =
      QueryStringProperty<UserEntity>(_entities[5].properties[12]);

  /// see [UserEntity.verifyProfile]
  static final verifyProfile =
      QueryBooleanProperty<UserEntity>(_entities[5].properties[13]);
}
